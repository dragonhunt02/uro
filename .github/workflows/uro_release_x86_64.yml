name: Uro Development x86_64

on:
  push:
    branches: [api]
  pull_request:
    branches: [master]

jobs:
  build:
    timeout-minutes: 7
    runs-on: ubuntu-24.04
 #   container:
  #    image: elixir:1.16.3-otp-26

    steps:
      - uses: actions/checkout@v2

      - name: python
        run: |
          echo "Test" > aname.txt
          echo '
          import requests
          multipart_form_data = {
              "upload": ("aname1.txt", open("aname.txt", "rb")),
              "ction": (None, "tore"),
              "ath": (None, "/path1")
          }
          import logging
          import urllib3
          from http.client import HTTPConnection
          HTTPConnection.debuglevel = 1
          logging.basicConfig()
          logging.getLogger().setLevel(logging.DEBUG)
          requests_log = logging.getLogger("requests.packages.urllib3")
          requests_log.setLevel(logging.DEBUG)
          requests_log.propagate = True
          #log = logging.getLogger('urllib3')
          #log.setLevel(logging.DEBUG)

          response = requests.post("https://0.0.0.0/post", files=multipart_form_data)
          print(response.content)
          ' > request.py
          cat request.py
          python3 request.py
          exit 1

      - name: Install system dependencies
        run: |
          sudo apt update -y 
          sudo apt install -y openssl ca-certificates
          export CURL_SSL_BACKEND=openssl
          export CURL_SSL_VERSION=max_tls1_2
          mv .env.example .env
          mv frontend/.env.example frontend/.env
          # timeout 5m docker compose up
          # docker compose -f docker-compose.development.yml up -d
          docker compose up -d
          sleep 1m
          URO_ID=$( docker ps --format "{{.ID}} {{.Image}}" | awk '$2 ~ /^.*-uro/ {print $1}' )
          
          docker exec ${URO_ID} mkdir -p uploads
          #docker exec ${URO_ID} touch uploads/test_avatar1.scn
          #docker exec ${URO_ID} touch uploads/test_scene1.scn
          #docker exec ${URO_ID} touch uploads/teststring.jpg

          docker exec ${URO_ID} mix run priv/repo/test_seeds.exs
          docker exec ${URO_ID} mix run priv/repo/test_user_content.exs
          sleep 10s
          curl -v -L http://0.0.0.0:80/
          curl -v -L http://0.0.0.0:80/api/v1/health
          curl -v -i -c cookies.txt -X POST -H "Content-Type: application/json" -d '{"username":"adminuser","password":"adminpassword"}' http://0.0.0.0:80/api/v1/login
          
          curl -v -L -s -o responsemap.json http://0.0.0.0:80/api/v1/maps
          cat responsemap.json
          echo -e "\nMaps end\n\n\n"
          
          curl -v -L -s -o response.json http://0.0.0.0:80/api/v1/avatars
          cat response.json
          echo -e "\nAvatars end\n\n\n"
          
          #echo -e "\nDockerlogs disabled\n\n\n"
          #docker logs ${URO_ID}
          
          curl -v -L -b cookies.txt http://0.0.0.0:80/api/v1/admin
          echo "Html test"
          sudo bash -c 'echo "0.0.0.0 vsekai.local" >> /etc/hosts'
          
          echo -e "\nAuth requests"
          curl -v --http1.0 -b cookies.txt http://0.0.0.0:80/admin || true
          echo -e "\nNot Auth requests"
          curl -v -L --http1.0 http://0.0.0.0:80/admin
          echo "Run wget"
          #wget --no-check-certificate --secure-protocol=TLSv1_2 https://0.0.0.0:443/
          echo "Run curl"
          #curl -v -k -L https://0.0.0.0:443/

          
          echo -e "\nNew endpoints\n\n\n"
          curl -v -L -s -o responsedashmap.json -b cookies.txt http://0.0.0.0:80/api/v1/dashboard/maps
          cat responsedashmap.json
          echo -e "\nDashMaps end\n\n\n"

          echo "Testscene" > example.scn
          echo "Testimg" > exampleimage.jpg
          CADDY_ID=$( docker ps --format "{{.ID}} {{.Image}}" | awk '$2 ~ /^.*-caddy/ {print $1}' )
          
          #curl -v -L -s -o responsepostmap.json -b cookies.txt -X POST http://0.0.0.0:80/api/v1/dashboard/maps \
          #-H "Content-Type: application/json" \
          #-d '{"map": { "name": "MyScene", "description": "My custom scene", "is_public": true, "user_content_data": {"filename": "autogen.scn", "content_type": "application/octet-stream", "data": ""}, "user_content_preview": {"filename": "autogen.png", "content_type": "image/png", "data": ""} }}'
          curl -v -L -s -o responsepostmap.json -b cookies.txt -X POST http://0.0.0.0:80/api/v1/dashboard/maps \
          -F "name=MyScene1" \
          -F "description=My custom scene" \
          -F "is_public=true" \
          -F "filename=autogen.scn; user_content_data=@example.scn" \
          -F "filename=autogen.jpg; user_content_preview=@exampleimage.jpg"
          #--trace-ascii ascii.txt
          cat responsepostmap.json
          echo -e "\n\n"
          #cat ascii.txt
          echo -e "\nDashPostMaps end\n\n\n"

          echo "Caddy: ${CADDY_ID}"
          docker logs ${CADDY_ID}

          
          exit 1
          export DEBIAN_FRONTEND=noninteractive
          apt update
          apt install -y postgresql inotify-tools sudo
          sudo -u postgres initdb -D /var/lib/postgresql/data
          sudo -u postgres psql -c "CREATE DATABASE vsekai;"
          sudo -u postgres psql -c "CREATE USER vsekai WITH ENCRYPTED PASSWORD 'vsekai';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE vsekai TO myuser;"
          timeout 2m sudo -u postgres pg_ctl -D /var/lib/postgresql/data -l logfile start

          apt install -y build-essential erlang-dev curl

      - name: Set up Elixir
        run: |
          mix local.hex --force
          mix local.rebar --force

      - name: Install CockroachDB
        run: |
          curl -s https://binaries.cockroachdb.com/cockroach-v23.2.0-rc.1.linux-amd64.tgz | tar xvz
          mkdir -p ${{ runner.temp }}/cockroach
          cp cockroach-v23.2.0-rc.1.linux-amd64/cockroach ${{ runner.temp }}/cockroach/
          echo "${{ runner.temp }}/cockroach" >> $GITHUB_PATH

      - name: Start CockroachDB
        run: |
          cockroach start-single-node --insecure --background

      - name: Wait for CockroachDB to be ready
        run: |
          until cockroach sql --execute="SELECT 1" --insecure; do sleep 1; done

      - name: Install dependencies
        run: mix deps.get

      - name: Compile code
        run: mix compile

      - name: Run tests
        continue-on-error: true
        id: test_step
        run: |
          set -e
          chmod +x elixir_mvsqlite/rust_src/target/release/mvstore
          export RUST_LOG=error
          elixir_mvsqlite/rust_src/target/release/mvstore --data-plane 127.0.0.1:7000 --admin-api 127.0.0.1:7001 --metadata-prefix mvstore-test --raw-data-prefix m --auto-create-namespace --cluster /etc/foundationdb/fdb.cluster &
          sleep 1
          curl http://localhost:7001/api/create_namespace -d '{"key":"uro_dev.sqlite3","metadata":""}'
          sleep 1
          MIX_ENV=test mix ecto.setup
          MIX_ENV=test mix run priv/repo/test_seeds.exs
          mix test | tee test_output.txt; test ${PIPESTATUS[0]} -eq 0

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test_output.txt

      - name: Parse and check test results
        continue-on-error: true
        if: always()
        run: |
          echo "Parsing test results..."
          TEST_OUTPUT=$(grep -oP '\d+ tests, \K\d+(?= failures)' test_output.txt)
          echo "TEST_FAILURES=$TEST_OUTPUT" >> $GITHUB_ENV

          if [ "$TEST_OUTPUT" -le 102 ]; then
            echo "Test failures are within the acceptable range."
          else
            echo "Too many test failures: $TEST_OUTPUT"
            exit 1
          fi

      - name: Check formatted code
        run: mix format --check-formatted

      - name: Run server
        run: |
          # mix do compile, phx.digest
          mix uro.apigen
          MIX_ENV=prod
          timeout 3m iex -S mix do ecto.migrate, phx.servermix
        
